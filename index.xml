<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>shotarok&#39;s Tech Blog</title>
    <link>http://blog.shotarok.com/</link>
    <description>Recent content on shotarok&#39;s Tech Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>Written by Shotaro Kohama</copyright>
    <lastBuildDate>Wed, 07 Jun 2017 09:45:00 +0900</lastBuildDate>
    
	<atom:link href="http://blog.shotarok.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A Review of Udacity Deep Learning Nanodegree</title>
      <link>http://blog.shotarok.com/post/a-review-of-deep-learning-nanodegree/</link>
      <pubDate>Wed, 07 Jun 2017 09:45:00 +0900</pubDate>
      
      <guid>http://blog.shotarok.com/post/a-review-of-deep-learning-nanodegree/</guid>
      <description>2017/05/28 に Udacity の Deep Learning Nanodegree を卒業した。
僕が大学院を卒業した2015年ごろ、まだ Deep Learning の波は研究室・自然言語処理(?)には来ていなかったが、 研究室に残っている同期の話を聞いたり、世の中のニュースを見ていても、世界ががらっと変わっていることを感じていた。 そんな中 Deep Learning を学ぶ機会を探していて見つけたのが、この Udacity の Nanodegree だった。
1月ごろに申し込みしたのだが、最初に $400 かかると聞いたときは躊躇した。でも GPU インスタンスを使うための AWS の $100 クーポンや有料の Slack チームを使った、 オフィスアワーになんでも聞いて良いよチャンネル (#ama) があったり、お金がかかりそうな手厚いサポートもあった。
データを整形する手間が省け、TensorFlow を使って Seq2Seq や DCGAN を動かし、授業のコードや Slack の他の人のコメントを参考にしながら、 自分が書いたコードが間違っていたら Review してもらえる。 Deep Leraning を俯瞰したいという自分の動機にとてもマッチしていて効率的に学べたと思う。十分な価値はあったしむしろ安かったかも。 実際、2回目の5月からのコースでは $600 か $800 に値上げしてたみたい。
コンテンツについては、この GitHub のレポジトリ udacity/deep-learning を見るのが、はやそう。 各授業の資料が Jupyter notebook になっていて、 Review とか Video がなくても自習に役立つと思う。
Siraj Raval という Youtuber と Floyd というサービスを知れたのも良かった。</description>
    </item>
    
    <item>
      <title>2016年振り返り</title>
      <link>http://blog.shotarok.com/post/review-in-2016/</link>
      <pubDate>Sat, 31 Dec 2016 22:00:00 +0900</pubDate>
      
      <guid>http://blog.shotarok.com/post/review-in-2016/</guid>
      <description>SOTA | DECEMBER 31, 2015 2015年振り返り がとても読みやすく, 何年か経って忘れた頃に見返すと楽しい気がしたので自分も 2016年に出会って好きだったもの, 影響を受けたことを雑多にまとてみる.
Blog 運用まわりの技術・知識が気になる今日このごろ，後で読む用に残す習慣がなかったので最近読んだものに偏ってしまっている.
 htop explained Explanation of everything you can see in htop/top on Linux Distributed Time Travel for Feature Generation | The Netflix Blog 下から目線のコードレビュー | steps to phantasien A Million Hello Worlds | steps to phantasien Webオペレーションエンジニアのアウトプットと開発力 | 人間とウェブの未来 Linuxサーバにログインしたらいつもやっているオペレーション| ゆううきブログ Webシステムにおけるデータベース接続アーキテクチャ概論 | ゆううきブログ 2015年Webサーバアーキテクチャ序論 | ゆううきブログ 無駄な議論を減らすために使ってる言葉 | Konifar&amp;rsquo;s ZATSU 機械学習を利用するプロダクトのテスト | froglog プログラミングや統計の話など Memcached 1.4.19 to 1.</description>
    </item>
    
    <item>
      <title>Hugo &#43; Bitbucket &#43; CircleCI で GitHub Pages に自動デプロイ</title>
      <link>http://blog.shotarok.com/post/hugo-with-bitbucket-and-circleci/</link>
      <pubDate>Mon, 26 Dec 2016 22:00:00 +0900</pubDate>
      
      <guid>http://blog.shotarok.com/post/hugo-with-bitbucket-and-circleci/</guid>
      <description>このブログは Hugo で生成した静的ファイルを GitHub Pages でホスティングしていて Hugo に食わせるファイル自体は BitBucket のプライベートレポジトリで管理しています.
久しぶりにブログを書くと Hugo のコマンドを忘れてしまって, hugo server でビルドした結果を リンクのホストが localhost になっているのに気付かずに push してしまったり, 時間がかかっていたので BitBucket に更新があると CircleCI で Hugo の静的ファイルを生成して GitHub Pages にデプロイする ように下のような手順でしました.
 GitHub Pages のレポジトリにデプロイキーを登録 BitBucket のプライベートレポジトリを CircleCI に登録 CircleCI にデプロイキーを登録 BitBucket のプライベートレポジトリに circle.yml を追加 記事を編集して push すると自動デプロイされることを確認  以下，ハマったところ・注意したところをポイントに手順を紹介します.
1. GitHub Pages にデプロイキーを登録 CircleCI からデプロイを行うために公開鍵を ssh-key をデプロイキーとして登録します. デプロイキーは下のような感じでローカルで生成します.
$ cd ~/.ssh $ ssh-keygen -t rsa -f hugo-blog Generating public/private rsa key pair.</description>
    </item>
    
    <item>
      <title>GASでDMM英会話の予約メールから自動的にカレンダーに登録</title>
      <link>http://blog.shotarok.com/post/2016-12-09-auto_creation_of_eikaiwa_events/</link>
      <pubDate>Fri, 09 Dec 2016 00:00:00 +0900</pubDate>
      
      <guid>http://blog.shotarok.com/post/2016-12-09-auto_creation_of_eikaiwa_events/</guid>
      <description>この記事は CAMPHOR- Advent Calendar 2016 の &amp;ldquo;9日目&amp;rdquo; の記事です.
今年の夏にスピーキングの練習をしたいと思って DMM英会話 をはじめました. 他のオンライン英会話サービスもそうでしたが, DMM英会話サービスはレッスンを予約するとメールが送られてきます. 1 最初は手でカレンダーに登録してたのですが, 毎日プランを始めてしばらくするとめんどくさくてやらなくなり, 案の定予約を忘れたりしました. 予約を忘れず, かつ lazy2 に過ごすために Google Apps Script でDMM英会話予約メールからカレンダーに自動登録するスクリプト を書いたので, 今回はその共有です.
How to work スクリプトの動作概要はこちらです.
 受信ボックスから 未読 の予約メールを検索 未読の予約メールの件名・本文から正規表現で日付を抽出しカレンダーに登録 予約メールを 既読 にする  あとは GAS の機能を使って 1.~3. を定期的に実行します.
既にカレンダーに登録してあるレッスンかどうかを判断するのに メールの未読・既読だけを使っている のが処理を簡単にしているミソですね. 3
スクリプトは Google Drive の CAMPHOR- Advent Calendar 2016 9th day (EnglishSkypeLessons) に置きました. コードを読める方にはスクリプトを読んで頂いて, 記事の残りの部分では GoogleカレンダーとDMM英会話を使っていて僕と同じ悩みを抱えている, そんなあなたに使って頂けるように 使い方 にフォーカスして説明します.
How to use 1.</description>
    </item>
    
    <item>
      <title>&#39;Kaggle Display Advertising Challenge&#39; working with vw-luigi</title>
      <link>http://blog.shotarok.com/post/2016-05-03-vwluigi_with_critio_dataset/</link>
      <pubDate>Tue, 03 May 2016 11:37:10 +0900</pubDate>
      
      <guid>http://blog.shotarok.com/post/2016-05-03-vwluigi_with_critio_dataset/</guid>
      <description>When you tackle some machine learning problems with vowpal wabbit, have you felt annoying to write monotonous evaluation code like cross-validation? vw-luigi (https://github.com/shotarok/vw-luigi) helps you at such time.
The vw-luigi includes luigi workflows to evaluate models trained by vowpal wabbit. All you need to do is prepare for training and test data. If you use vw-luigi, it would train a model, predict with the model and you can get the evaluation result automatically.</description>
    </item>
    
    <item>
      <title>お気に入りのPodcast</title>
      <link>http://blog.shotarok.com/post/2016-04-30-my-favorite-podcasts/</link>
      <pubDate>Sat, 30 Apr 2016 21:19:00 +0900</pubDate>
      
      <guid>http://blog.shotarok.com/post/2016-04-30-my-favorite-podcasts/</guid>
      <description>京都で過ごしていた頃はもっぱら移動は自転車だったが、東京に来てそれが電車に変わった。 毎日電車に乗るのは高校生以来で、当時は乗車時間が40分程で電車も空いていたので座って単語帳を開いてよく寝ていた。 今は10分程度なので寝るわけにもいかず、まぁ音楽より技術や英語の勉強になるかと思い Podcast を聴くようになった。 そんな感じで1年程過ごし番組も選抜されてきたので、この辺でお気に入りの番組とエピソードをまとめようと思う。
Rebuild 日本語Tech系 Postcast といえば Rebuild と言っても過言ではないくらい界隈で有名。ホストの@miyagawa さんとゲストの方が話す AlphaGo の戦略・実装とか CPU/GPU アーキテクチャなどDeepな技術ネタからマネジメントとかプロダクティビティなどソフトなネタまで、ソフトウェア開発に関わる様々な話題が聞ける番組。
お気に入りのエピソードは &amp;ldquo;127: Post-mature Optimization (omo)&amp;rdquo; 。業務で触るようになって中身に興味が出てきたデータベースについて、その大家が書いた&amp;ldquo;赤い本&amp;rdquo;が知れたこと。 Borg と YARN というスケジューラーの違いが MapReduce や Spark などの1つ上層の進化にどう影響を与えたかという話が個人的に大ヒットだった。
Talk Python To Me  およそTech系の Podcast が始まるとは思わない、こんなジングルで始まる番組。SQLAlchemy, Flask といった有名モジュールにまつわる話から どうやったらPythonを使う仕事を見つけられるか、フォントや映画制作でどう使っているかなど Python にまつわる話なら何でも聴ける番組。多くのエピソードで transcription も用意してある。
お気に入りのエピソードは &amp;ldquo;Episode #22: CPython Internals and Learning Python with pythontutor.com&amp;rdquo;。pythontutor を含む CPython の実装についての様々な資料を知れたのが good。
バイリンガルニュース 日本語と英語でニュースを紹介した後に Michael が英語で Mami が日本語でバイリンガル会話形式でコメントしていく番組。(番組冒頭より抜粋) 個人的には最初に Podcast を聴き始めたきっかけになった番組。2013年の夏にインターンシップで3ヶ月程東京に来ていた頃に同じく通勤時間によく聴いていた。この番組で 「&amp;rdquo;Do you know what I mean?</description>
    </item>
    
    <item>
      <title>超絶技巧プログラミングやってみた</title>
      <link>http://blog.shotarok.com/post/2015-12-17_hello-quine-world/</link>
      <pubDate>Thu, 17 Dec 2015 00:00:00 +0900</pubDate>
      
      <guid>http://blog.shotarok.com/post/2015-12-17_hello-quine-world/</guid>
      <description>この記事は CAMPHOR- Advent Calendar 2015 の 17 日目の記事です。
こんにちは。@shotarok (Twitter: @shotarok28) です。３月までは京都で学生をしていて、今年の４月から東京の FreakOut という広告の会社でソフトウェアエンジニアをしている CAMPHOR- OBです。
Quine って何？ みなさん「Quine」という言葉を聞いたことがありますか？ Quine とは、こんなプログラムのことです。 ※1
 クワイン（英: Quine）は、コンピュータプログラムの一種で、自身のソースコードと完全に同じ文字列を出力するプログラムである。
[出典: wikipedia クワイン(プログラミング)](https://ja.wikipedia.org/wiki/%E3%82%AF%E3%83%AF%E3%82%A4%E3%83%B3(%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0)
 定義を読むだけでは、ぱっとはわからないので、実際にプログラムが動いているところを見てみましょう。

この gif をみると ruby プログラム quine.rb は CAMPHOR- のロゴの形をしていること、ruby で実行すると CAMPHOR- のロゴが出力されることが確認出来ると思います。実は quine.rb は自分自身を出力していて、その出力を実行してもまた同じロゴの形をしたソースコードが出力されます。wiki に書いてあった 自身のソースコードと完全に同じ文字列を出力するプログラム. こんなプログラムが Quine です。ソースコードはこちら(gist)。
僕が初めて Quine に出会ったのは、いつかの ICPC の地区大会のエクスカーションで Google を訪問して、そこで shinh さんのお話を聞いたときでした。その当時は、自分で書いてみたいと思って、調べてみたものの、結局書くことが出来ず、そのまま放置になっていました。
それから数年経った2015年夏、この本と出会いました。
「あなたの知らない超絶技巧プログラミングの世界」
この本は Quine をはじめとする「超絶技巧プログラミング」と呼ばれる、実用性はないけれど、不思議で楽しいプログラミング技法を紹介しています。そして、この本のおかげで念願叶い Quine を書くことができました。詳細な解説は本を読んで頂くことにして、この記事では、僕が書いた quine.rb の簡単な説明と、作成した手順を紹介できればと思います。
はじめての Quine 今回、下のような流れで僕は quine.</description>
    </item>
    
    <item>
      <title>Hugo &#43; Github Pages でブログ開始</title>
      <link>http://blog.shotarok.com/post/2015-12-15_my-first-post/</link>
      <pubDate>Tue, 15 Dec 2015 08:16:39 +0900</pubDate>
      
      <guid>http://blog.shotarok.com/post/2015-12-15_my-first-post/</guid>
      <description>以前は はてなブログ を使っていたのですが、今年の４月に就職してデジタルマーケティングの会社に入ったので、 3rd party javascript やタグマネージャーの勉強することもままあり、 CAMPHOR- Advent Calendar に参加する前に、タグを好きに追加できるブログをはじめてみようとなりました。
Markdown で書ける静的ジェネレーターなら、正直なんでも良かったのですが、 使っている人がそこそこいる(静的ジェネレーターの GitHub の star 数ランキングで割と上位だった)、 気に入ったテーマがあった、かつ 普段触らない言語 go を触る良い機会になるかもと思ったこと 等を理由に Hugo を使うことにしました。
簡単な使い方 Hugo を使うと hugo new site &amp;lt;name&amp;gt; というコマンドでサイトの雛形を作る事ができます。 Hugo自体は go get -u -v github.com/spf13/hugo や brew install hugo でインストールできます。
$ hugo new site test-blog $ tree test-blog test-blog ├── archetypes ├── config.toml ├── content ├── data ├── layouts └── static 5 directories, 1 file  テーマは hugoThemes というレポジトリにたくさんまとめてあります。 これらを利用するにはまず theme ディレクトリを作成しクローンしてきます。 そのあと気に入ったテーマを -t で指定し hugo を実行すると public フォルダに静的コンテンツが作成されます。</description>
    </item>
    
  </channel>
</rss>
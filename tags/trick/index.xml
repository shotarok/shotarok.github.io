<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Trick on shotarok&#39;s Tech Blog</title>
    <link>http://blog.shotarok.com/tags/trick/</link>
    <description>Recent content in Trick on shotarok&#39;s Tech Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Thu, 17 Dec 2015 00:00:00 +0900</lastBuildDate>
    <atom:link href="http://blog.shotarok.com/tags/trick/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>超絶技巧プログラミングやってみた</title>
      <link>http://blog.shotarok.com/post/2015-12-17_hello-quine-world/</link>
      <pubDate>Thu, 17 Dec 2015 00:00:00 +0900</pubDate>
      
      <guid>http://blog.shotarok.com/post/2015-12-17_hello-quine-world/</guid>
      <description>

&lt;p&gt;この記事は &lt;a href=&#34;http://advent.camph.net/&#34;&gt;CAMPHOR-
Advent Calendar 2015&lt;/a&gt; の 17 日目の記事です。&lt;/p&gt;

&lt;p&gt;こんにちは。&lt;a href=&#34;https://github.com/shotarok&#34;&gt;@shotarok&lt;/a&gt; (Twitter: &lt;a href=&#34;https://twitter.com/shotarok28&#34;&gt;@shotarok28&lt;/a&gt;) です。３月までは京都で学生をしていて、今年の４月から東京の &lt;a href=&#34;https://www.fout.co.jp/&#34;&gt;FreakOut&lt;/a&gt; という広告の会社でソフトウェアエンジニアをしている CAMPHOR- OBです。&lt;/p&gt;

&lt;h1 id=&#34;quine-って何:c0d6977ca17c38caef79e8f3a8636f21&#34;&gt;Quine って何？&lt;/h1&gt;

&lt;p&gt;みなさん「&lt;strong&gt;Quine&lt;/strong&gt;」という言葉を聞いたことがありますか？ Quine とは、こんなプログラムのことです。 ※1&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;クワイン（英: Quine）は、コンピュータプログラムの一種で、自身のソースコードと完全に同じ文字列を出力するプログラムである。&lt;br /&gt;
&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%82%AF%E3%83%AF%E3%82%A4%E3%83%B3_(%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0&#34;&gt;出典: wikipedia クワイン_(プログラミング)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;定義を読むだけでは、ぱっとはわからないので、実際にプログラムが動いているところを見てみましょう。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gyazo.com/71c58b0409c2868d29ea40b15a7df6c2&#34;&gt;&lt;img src=&#34;https://i.gyazo.com/71c58b0409c2868d29ea40b15a7df6c2.gif&#34; alt=&#34;https://gyazo.com/71c58b0409c2868d29ea40b15a7df6c2&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この gif をみると ruby プログラム &lt;a href=&#34;https://gist.github.com/shotarok/4d9fc754e4c00036cbdf&#34;&gt;&lt;code&gt;quine.rb&lt;/code&gt;&lt;/a&gt; は CAMPHOR- のロゴの形をしていること、ruby で実行すると CAMPHOR- のロゴが出力されることが確認出来ると思います。実は &lt;a href=&#34;https://gist.github.com/shotarok/4d9fc754e4c00036cbdf&#34;&gt;&lt;code&gt;quine.rb&lt;/code&gt;&lt;/a&gt; は自分自身を出力していて、その出力を実行してもまた同じロゴの形をしたソースコードが出力されます。wiki に書いてあった
&lt;i&gt;自身のソースコードと完全に同じ文字列を出力するプログラム.&lt;/i&gt; こんなプログラムが Quine です。ソースコードはこちら(&lt;a href=&#34;https://gist.github.com/shotarok/4d9fc754e4c00036cbdf&#34;&gt;gist&lt;/a&gt;)。&lt;/p&gt;

&lt;p&gt;僕が初めて Quine に出会ったのは、いつかの &lt;a href=&#34;http://icpc.iisf.or.jp/2015-tsukuba/?lang=ja&#34;&gt;ICPC&lt;/a&gt; の地区大会のエクスカーションで Google を訪問して、そこで shinh さんのお話を聞いたときでした。その当時は、自分で書いてみたいと思って、調べてみたものの、結局書くことが出来ず、そのまま放置になっていました。&lt;/p&gt;

&lt;p&gt;それから数年経った2015年夏、この本と出会いました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.amazon.co.jp/dp/B015R0GNXK/&#34;&gt;「&lt;strong&gt;あなたの知らない超絶技巧プログラミングの世界&lt;/strong&gt;」&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この本は Quine をはじめとする「超絶技巧プログラミング」と呼ばれる、実用性はないけれど、不思議で楽しいプログラミング技法を紹介しています。そして、この本のおかげで念願叶い Quine を書くことができました。詳細な解説は本を読んで頂くことにして、この記事では、僕が書いた &lt;code&gt;quine.rb&lt;/code&gt; の簡単な説明と、作成した手順を紹介できればと思います。&lt;/p&gt;

&lt;h1 id=&#34;はじめての-quine:c0d6977ca17c38caef79e8f3a8636f21&#34;&gt;はじめての Quine&lt;/h1&gt;

&lt;p&gt;今回、下のような流れで僕は &lt;code&gt;quine.rb&lt;/code&gt; を作成しました。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;CAMPHOR- のロゴ画像からコードの整形に使うビットマップの作成。&lt;/li&gt;
&lt;li&gt;ビットマップから &lt;code&gt;quine.rb&lt;/code&gt; を出力する &lt;code&gt;build_quine.rb&lt;/code&gt; を作成。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;quine.rb&lt;/code&gt; が文法的に正しくなっているかを実行して確認。&lt;br /&gt;
失敗したら、 2. に戻ってビットマップを調整。&lt;br /&gt;
成功したら、Quine 完成！&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;1-ロゴ画像からビットマップの作成:c0d6977ca17c38caef79e8f3a8636f21&#34;&gt;1. ロゴ画像からビットマップの作成&lt;/h2&gt;

&lt;p&gt;まずは &lt;code&gt;quine.rb&lt;/code&gt; をロゴの形にするための雛形を画像から作成します。これは jpeg 画像から ASCII アートを生成してくれる &lt;code&gt;jp2a&lt;/code&gt; と png から jpeg に変換する &lt;code&gt;convert&lt;/code&gt; を使うと作業が楽になります。(OSX をお使いの方は両方とも Homebrew でインストールできます) これらを使うと、例えば、こんな感じでビットマップを作成できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ wget https://camph.net/static/images/navbar_logo.png
$ convert navbar_logo.png jpg:- | jp2a - --chars=012 | tr &#39;2&#39; &#39; &#39;
1111111                                                        111111                                                                                                                            
  1111111111                                              1111111111                                                                                                                             
   1111111111111                                      111111111111                                                                                                                               
     1111111111111                                 11111111111111                                                                                                                                
       11111111111111                            1111111111111                                                                                                                                   
          1111111111111                       11111111111111                                                                                                                                     
             1111111111111                  111111111111                                                                                                                                         
                 1111111111               11111111111                                                                                                                                            
                      111111             111111                                                                                                                                                  
                             111111111111                                                                                                                                                        
                               111111111                                                                                                                                                         
                               1111111                                                                                                                                                           
                                11111                                                                                                                                                            
                                 1111                                                                                                                                                            
                                 111                                                                                                                                                             
                                  11                                                                                                                                                             
                                  11                                                                                                                                                             


&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-ビットマップから-quine-を作る:c0d6977ca17c38caef79e8f3a8636f21&#34;&gt;2. ビットマップから Quine を作る&lt;/h2&gt;

&lt;p&gt;作成したビットマップを使って ロゴの形をした Quine を出力する &lt;a href=&#34;https://gist.github.com/shotarok/8ca2098340a381be0135&#34;&gt;&lt;code&gt;build_quine.rb&lt;/code&gt;&lt;/a&gt; を作ります。天下り的ですが、まずは &lt;a href=&#34;https://gist.github.com/shotarok/8ca2098340a381be0135&#34;&gt;&lt;code&gt;build_quine.rb&lt;/code&gt;&lt;/a&gt; を御覧ください。&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/shotarok/8ca2098340a381be0135.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;これを実行すると &lt;a href=&#34;https://gist.github.com/shotarok/4d9fc754e4c00036cbdf&#34;&gt;&lt;code&gt;quine.rb&lt;/code&gt;&lt;/a&gt;  が出てきます。このコードが何をやっているかを上から順に説明していきます！&lt;/p&gt;

&lt;h3 id=&#34;line1-2:c0d6977ca17c38caef79e8f3a8636f21&#34;&gt;Line1-2&lt;/h3&gt;

&lt;p&gt;ここが Quine の本体と言っても過言ではありません。実はロゴの形にする気がなければ Quine はこんなワンライナーで実現できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ruby -e &#39;eval$s=%w(puts(s=%(eval$s=%w(#{$s})*&amp;quot;&amp;quot;));)*&amp;quot;&amp;quot;&#39;
&amp;gt; eval$s=%w(puts(s=%(eval$s=%w(#{$s})*&amp;quot;&amp;quot;));)*&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ざくっと説明すると、変数 &lt;code&gt;$s&lt;/code&gt; にソースコードを文字列として代入しています。
その代入された文字列内の &lt;code&gt;#{$s}&lt;/code&gt; 部分で、変数 &lt;code&gt;$s&lt;/code&gt; が展開されて、これが自分自身を出力する秘訣になっています。&lt;/p&gt;

&lt;p&gt;また &lt;code&gt;%w(...)*&amp;quot;&amp;quot;&lt;/code&gt; は &lt;code&gt;%w&lt;/code&gt; で作った文字列型が入った配列を空文字列で join しており，このおかげでソースコードをロゴの形に加工できるようになっています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ruby -e &#39;eval$s=%w(put
s(s=%(ev
al$s=%w(#{$
s})*&amp;quot;&amp;quot;)
);)*&amp;quot;&amp;quot;
&#39;
&amp;gt; eval$s=%w(puts(s=%(eval$s=%w(#{$s})*&amp;quot;&amp;quot;));)*&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;本ではもっと順を追って丁寧に解説されていますので、気になる方は是非ご一読下さい。&lt;/p&gt;

&lt;h3 id=&#34;line4:c0d6977ca17c38caef79e8f3a8636f21&#34;&gt;Line4&lt;/h3&gt;

&lt;p&gt;変数 &lt;code&gt;bidmap&lt;/code&gt; には、ロゴから作成されたビットマップを36変数に変換したものを入れています。
ruby は 多倍長整数と &lt;code&gt;to_s&lt;/code&gt; で36進数の変換をサポートしているので、下のようにビットマップから36進数に変換できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ruby -e &#39;LOGO=&amp;lt;&amp;lt;END
11111                                     11111
 11111111                             11111111
    1111111111                     1111111111
     111111111                 111111111
         11111111             11111111
            1111111         111111
                    1111111
                     11111
                      111
                      111
                       1
END
puts(LOGO.gsub(/\n/, &amp;quot;&amp;quot;).gsub(/[^1]/, &amp;quot;0&amp;quot;).reverse.to_i(2).to_s(36));&#39;
&amp;gt; 3mf7nxp6d7yn1up5cf7lkyiexikdcs9mo4xw8j2dv93putn0tbabu2ep3qmdxdel52h7zfwbq7lzz9j8q9amz55h91pwj127
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;line6-12:c0d6977ca17c38caef79e8f3a8636f21&#34;&gt;Line6-12&lt;/h3&gt;

&lt;p&gt;ここの部分は変数 &lt;code&gt;bidmap&lt;/code&gt; を使って、ロゴの形でコードを出力しています。&lt;code&gt;bidmap&lt;/code&gt; を多倍長整数にして 1bitずつ走査して &lt;code&gt;1&lt;/code&gt; の場合はコードを1文字出力し、&lt;code&gt;0&lt;/code&gt; の場合は空白 &lt;code&gt;32.chr&lt;/code&gt; を出力します。※2.&lt;/p&gt;

&lt;h2 id=&#34;3-quine-rb-の動作確認:c0d6977ca17c38caef79e8f3a8636f21&#34;&gt;3. &lt;code&gt;quine.rb&lt;/code&gt; の動作確認&lt;/h2&gt;

&lt;p&gt;ここまで来たら、後は微調整です。とは言ってもここが地味に大変だったりするのですが…。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;%w()&lt;/code&gt; で囲まれた部分は好きに改行できるのですが、&lt;code&gt;eval$s=%w(...)*&amp;quot;&amp;quot;&lt;/code&gt; の部分は ruby の文法的に正しくないといけません。
正しい文法になるように、ビットマップを調整しましょう。&lt;/p&gt;

&lt;p&gt;またビットマップが大きくてソースコードが埋め込めるところが少ないと &lt;code&gt;bitmap&lt;/code&gt; が大きくなってコードがはみ出てしまいます。
ビットマップを反転させたり、ロゴに含まれるフォントを大きくしたり、コードがはみ出ないようにビットマップを調整しましょう。&lt;/p&gt;

&lt;p&gt;逆にビットマップが十分大きくて、ソースコードが足りない場合もあります。そんな時はコメント &lt;code&gt;;&lt;/code&gt; が利用できます。
&lt;code&gt;;&lt;/code&gt; は適切な位置にあれば、どれだけ追加しても文法的に正しいコードとなります。※3.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ruby -e &#39;puts(&amp;quot;hello&amp;quot;)&#39;
&amp;gt; hello
$ ruby -e &#39;;;;;;;;;;puts(&amp;quot;hello&amp;quot;);;;;;;;&#39;
&amp;gt; hello
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今回はロゴを一つだけ埋め込みましたが、本に紹介されている手法を使えば、下の gif のように複数のロゴを埋め込こんで Quine を作ることもできます。ただ数を増やせば増やすほど、この最後の調整が大変になりました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gyazo.com/a52c7be7a37931636e18ee3aa23fd146&#34;&gt;&lt;img src=&#34;https://i.gyazo.com/a52c7be7a37931636e18ee3aa23fd146.gif&#34; alt=&#34;https://gyazo.com/a52c7be7a37931636e18ee3aa23fd146&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;最後に:c0d6977ca17c38caef79e8f3a8636f21&#34;&gt;最後に&lt;/h1&gt;

&lt;p&gt;いかがだったでしょうか。自分しか読めないようなメンテナンス不能なコードを「あぁこの bitmap だと実行できない」と１文字消したり足したりするのは、業務にはない楽しさがありました。※4.&lt;/p&gt;

&lt;p&gt;超絶技巧プログラミング本には Quine 以外にもいろんな言語で実行できるプログラム、使える文字制限したプログラムなど楽しい超絶技巧が紹介されています。
また、つい先日行われた Ruby Kaigi で開催された &lt;a href=&#34;https://github.com/tric/trick2015/blob/master/README.ja.md&#34;&gt;TRICK 2015&lt;/a&gt; や、先ほどの本の著者である @mametter さんの&lt;a href=&#34;http://www.slideshare.net/mametter/ftd2015&#34;&gt;スライド&lt;/a&gt; 、また shinh さんの &lt;a href=&#34;http://shinh.skr.jp/obf/&#34;&gt;作品ページ&lt;/a&gt; なども覗いてみると楽しいと思います！&lt;/p&gt;

&lt;p&gt;明日は &lt;a href=&#34;http://yu-i9.github.io/&#34;&gt;@yui-9&lt;/a&gt; による 「&lt;strong&gt;型クラスを含んだ型推論を概観する 〜Typing Haskell in Haskell より〜&lt;/strong&gt;」 のお話です。お楽しみに！&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;※1. もともとは、クワインさんという哲学者の名前です。&lt;br /&gt;
※2. 空白は &lt;code&gt;%w(...)*&amp;quot;&amp;quot;&lt;/code&gt; で潰れてしまうので &lt;code&gt;32.chr&lt;/code&gt; を使用します。&lt;br /&gt;
※3. &lt;code&gt;;&lt;/code&gt; だと見栄えが悪いので、ランダムな文字列で埋めちゃっても良いと思います。&lt;br /&gt;
※4. commit もせずにコードを書いたり消したり推敲する。 &lt;a href=&#34;http://www.amazon.co.jp/%E3%83%8F%E3%83%83%E3%82%AB%E3%83%BC%E3%81%A8%E7%94%BB%E5%AE%B6-%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF%E6%99%82%E4%BB%A3%E3%81%AE%E5%89%B5%E9%80%A0%E8%80%85%E3%81%9F%E3%81%A1-%E3%83%9D%E3%83%BC%E3%83%AB-%E3%82%B0%E3%83%AC%E3%82%A2%E3%83%A0/dp/4274065979&#34;&gt;ハッカーと画家 は似ているという話&lt;/a&gt; を思い出しました。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>